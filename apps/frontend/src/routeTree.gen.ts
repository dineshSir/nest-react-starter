/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as AppImport } from './routes/_app'
import { Route as AuthResetPasswordImport } from './routes/_auth/reset-password'
import { Route as AuthLoginImport } from './routes/_auth/login'
import { Route as AuthForgotPasswordImport } from './routes/_auth/forgot-password'
import { Route as AppUserImport } from './routes/_app/_user'
import { Route as AppAdminImport } from './routes/_app/_admin'
import { Route as AppUserIndexImport } from './routes/_app/_user/index'
import { Route as AppUserSuccessImport } from './routes/_app/_user/success'
import { Route as AppUserFailedImport } from './routes/_app/_user/failed'
import { Route as AppAdminDashboardImport } from './routes/_app/_admin/dashboard'

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const AuthResetPasswordRoute = AuthResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLoginRoute = AuthLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

const AuthForgotPasswordRoute = AuthForgotPasswordImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => AuthRoute,
} as any)

const AppUserRoute = AppUserImport.update({
  id: '/_user',
  getParentRoute: () => AppRoute,
} as any)

const AppAdminRoute = AppAdminImport.update({
  id: '/_admin',
  getParentRoute: () => AppRoute,
} as any)

const AppUserIndexRoute = AppUserIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppUserRoute,
} as any)

const AppUserSuccessRoute = AppUserSuccessImport.update({
  id: '/success',
  path: '/success',
  getParentRoute: () => AppUserRoute,
} as any)

const AppUserFailedRoute = AppUserFailedImport.update({
  id: '/failed',
  path: '/failed',
  getParentRoute: () => AppUserRoute,
} as any)

const AppAdminDashboardRoute = AppAdminDashboardImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AppAdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_app/_admin': {
      id: '/_app/_admin'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppAdminImport
      parentRoute: typeof AppImport
    }
    '/_app/_user': {
      id: '/_app/_user'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppUserImport
      parentRoute: typeof AppImport
    }
    '/_auth/forgot-password': {
      id: '/_auth/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof AuthForgotPasswordImport
      parentRoute: typeof AuthImport
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginImport
      parentRoute: typeof AuthImport
    }
    '/_auth/reset-password': {
      id: '/_auth/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof AuthResetPasswordImport
      parentRoute: typeof AuthImport
    }
    '/_app/_admin/dashboard': {
      id: '/_app/_admin/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AppAdminDashboardImport
      parentRoute: typeof AppAdminImport
    }
    '/_app/_user/failed': {
      id: '/_app/_user/failed'
      path: '/failed'
      fullPath: '/failed'
      preLoaderRoute: typeof AppUserFailedImport
      parentRoute: typeof AppUserImport
    }
    '/_app/_user/success': {
      id: '/_app/_user/success'
      path: '/success'
      fullPath: '/success'
      preLoaderRoute: typeof AppUserSuccessImport
      parentRoute: typeof AppUserImport
    }
    '/_app/_user/': {
      id: '/_app/_user/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppUserIndexImport
      parentRoute: typeof AppUserImport
    }
  }
}

// Create and export the route tree

interface AppAdminRouteChildren {
  AppAdminDashboardRoute: typeof AppAdminDashboardRoute
}

const AppAdminRouteChildren: AppAdminRouteChildren = {
  AppAdminDashboardRoute: AppAdminDashboardRoute,
}

const AppAdminRouteWithChildren = AppAdminRoute._addFileChildren(
  AppAdminRouteChildren,
)

interface AppUserRouteChildren {
  AppUserFailedRoute: typeof AppUserFailedRoute
  AppUserSuccessRoute: typeof AppUserSuccessRoute
  AppUserIndexRoute: typeof AppUserIndexRoute
}

const AppUserRouteChildren: AppUserRouteChildren = {
  AppUserFailedRoute: AppUserFailedRoute,
  AppUserSuccessRoute: AppUserSuccessRoute,
  AppUserIndexRoute: AppUserIndexRoute,
}

const AppUserRouteWithChildren =
  AppUserRoute._addFileChildren(AppUserRouteChildren)

interface AppRouteChildren {
  AppAdminRoute: typeof AppAdminRouteWithChildren
  AppUserRoute: typeof AppUserRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppAdminRoute: AppAdminRouteWithChildren,
  AppUserRoute: AppUserRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthForgotPasswordRoute: typeof AuthForgotPasswordRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthResetPasswordRoute: typeof AuthResetPasswordRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthForgotPasswordRoute: AuthForgotPasswordRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthResetPasswordRoute: AuthResetPasswordRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AppUserRouteWithChildren
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/dashboard': typeof AppAdminDashboardRoute
  '/failed': typeof AppUserFailedRoute
  '/success': typeof AppUserSuccessRoute
  '/': typeof AppUserIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AppAdminRouteWithChildren
  '/forgot-password': typeof AuthForgotPasswordRoute
  '/login': typeof AuthLoginRoute
  '/reset-password': typeof AuthResetPasswordRoute
  '/dashboard': typeof AppAdminDashboardRoute
  '/failed': typeof AppUserFailedRoute
  '/success': typeof AppUserSuccessRoute
  '/': typeof AppUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_app/_admin': typeof AppAdminRouteWithChildren
  '/_app/_user': typeof AppUserRouteWithChildren
  '/_auth/forgot-password': typeof AuthForgotPasswordRoute
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/reset-password': typeof AuthResetPasswordRoute
  '/_app/_admin/dashboard': typeof AppAdminDashboardRoute
  '/_app/_user/failed': typeof AppUserFailedRoute
  '/_app/_user/success': typeof AppUserSuccessRoute
  '/_app/_user/': typeof AppUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/dashboard'
    | '/failed'
    | '/success'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/dashboard'
    | '/failed'
    | '/success'
    | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/_admin'
    | '/_app/_user'
    | '/_auth/forgot-password'
    | '/_auth/login'
    | '/_auth/reset-password'
    | '/_app/_admin/dashboard'
    | '/_app/_user/failed'
    | '/_app/_user/success'
    | '/_app/_user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_app",
        "/_auth"
      ]
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/_admin",
        "/_app/_user"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/forgot-password",
        "/_auth/login",
        "/_auth/reset-password"
      ]
    },
    "/_app/_admin": {
      "filePath": "_app/_admin.tsx",
      "parent": "/_app",
      "children": [
        "/_app/_admin/dashboard"
      ]
    },
    "/_app/_user": {
      "filePath": "_app/_user.tsx",
      "parent": "/_app",
      "children": [
        "/_app/_user/failed",
        "/_app/_user/success",
        "/_app/_user/"
      ]
    },
    "/_auth/forgot-password": {
      "filePath": "_auth/forgot-password.tsx",
      "parent": "/_auth"
    },
    "/_auth/login": {
      "filePath": "_auth/login.tsx",
      "parent": "/_auth"
    },
    "/_auth/reset-password": {
      "filePath": "_auth/reset-password.tsx",
      "parent": "/_auth"
    },
    "/_app/_admin/dashboard": {
      "filePath": "_app/_admin/dashboard.tsx",
      "parent": "/_app/_admin"
    },
    "/_app/_user/failed": {
      "filePath": "_app/_user/failed.tsx",
      "parent": "/_app/_user"
    },
    "/_app/_user/success": {
      "filePath": "_app/_user/success.tsx",
      "parent": "/_app/_user"
    },
    "/_app/_user/": {
      "filePath": "_app/_user/index.tsx",
      "parent": "/_app/_user"
    }
  }
}
ROUTE_MANIFEST_END */
